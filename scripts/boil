#!/bin/bash

print_usage(){
cat << EOF
Usage:
$(basename $0) <project_name> <template_name>

    Will copy template from <template_name> to <project_name>

$(basename $0) --list

    Lists available templates in template directory $(boil_query -t)
EOF
}

OPTS=`getopt -o hl --long help,list -n "$name"  -- "$@"`
if [ $? != 0 ] ; then echo "Failed to parse args" >&2 ; exit 1 ; fi

eval set -- "$OPTS"


while true;do
case "$1" in
-h|--help)
    print_usage
    exit 0
    ;;
-l|--list)
    boil_list_templates
    exit 0
    ;;
--)
    shift
    break
    ;;
*)
    break
    ;;
esac
shift
done



check_dependency(){
	if [ -z "$(which $1)" ]; then
		echo "UH OH, Missing dependency $1"
		echo "Please install $1"
		exit
	fi
}

if [ -z "$1" ]
then
        echo "No project name given"
	print_usage
        exit 1
fi

check_dependency sed
check_dependency find
check_dependency rename

project_name=$1
template_dir=$(boil_query --template-dir)

if [ -n "$2" ]
then
	template="$2"
else
	echo "No template given"
	print_usage
	exit 1
fi


if [ -e $project_name ]
then
	echo "Making backup of exisiting $project_name"
	mv "$project_name" "${project_name}.bak"
fi

cp -R "$template_dir/$template" $project_name

if rename --version  | grep util-linux &> /dev/null
then
    #Use the util-linux rename
    find ${project_name} -depth -exec rename -v "project_name" "${project_name}" {} \;
else
    #Use the perl expr rename
    find ${project_name} -depth -exec rename --filename -v "s/project_name/${project_name}/g" {} \;
fi

find ${project_name} -type f | xargs -I {FILES} sed -i "s/{{project_name}}/${project_name}/g" {FILES}
