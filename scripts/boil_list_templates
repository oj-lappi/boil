#!/bin/bash

name=boil_list_templates

print_usage(){
cat << EOF     
Usage:                      
	$name [template_dir]
		List the templates in template dir (default: $(boil_query --template-dir))
        -h, --help
                prints this help message
EOF
}

OPTS=`getopt -o h --long help -n "$name"  -- "$@"`
if [ $? != 0 ] ; then echo "Failed to parse args" >&2 ; exit 1 ; fi

eval set -- "$OPTS"

while true;do
case "$1" in
-h|--help)
	print_usage
	exit 0
	;;
--)
	shift
	break
	;;
*)
	break
	;;
esac
shift
done

if [[ $# -ge 2 ]]; then
    printf "$name: extra argument given, expecting 0 or 1 arguments\n"
    print_usage
    exit 1
fi

if [[ $# -eq 1 ]]; then
    template_dir="$1"
else
    template_dir=$(boil_query --template-dir)
fi

tmpl_manifest_file=boil.manifest
tmpl_config_file=boil.toml

if [[ ! -f ${template_dir}/${tmpl_manifest_file} ]]; then
    printf "ERROR: ${template_dir} does not contain a ${tmpl_manifest_file} file\n"
    exit 2
fi

#Copied from boil_stat
stat_boil_type(){
    boil_template="$1"
    if [[ ! -e ${boil_template} ]]; then
        printf "Path does not point to a file or directory"
	return
    fi

    if [[ -f ${boil_template}/${tmpl_manifest_file} ]]; then
	printf ""
	#printf "Boil template collection"
    elif [[ -f ${boil_template}/${tmpl_config_file} ]]; then
	printf "Decorated boil file"
    else
    	if [[ -d ${boil_template} ]]; then
	    printf "Tree"
    	elif [[ -x ${boil_template} ]]; then
	    printf "Executable"
	else
	    printf "File"
	fi
    fi

}

list_manifest(){
    indentation="                              "
    local template_dir="$1"
    local manifest="${template_dir}/${tmpl_manifest_file}"
    local depth=$2
    while read entry type; do
	if [[ -n "${entry}" ]];then
            printf " ${indentation:0:${depth}}- $entry"
            if [[ $type = "subtree" ]]; then
		printf "/"
	    fi
	    printf " : "
	    stat_boil_type "${template_dir}/${entry}"
	    printf "\n"
            if [[ $type = "subtree" ]]; then
                list_manifest ${template_dir}/${entry} $(( depth + 2 ))
	    fi
	fi
    done < ${template_dir}/${tmpl_manifest_file}
}

printf "Templates in ${template_dir}/:\n"

list_manifest $template_dir 0
